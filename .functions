# functions to open an url in safari on ios simulator
# deps:
# - http://github.com/phonegap/ios-sim
# - http://github.com/rockitbaby/IOSSimulatorSafariLauncher
function ipad-safari() {
  ios-sim launch ~/tools/ios-sim-safari-launcher/IOSSimulatorSafariLauncher.app --family ipad --args $1
}

function iphone-safari() {
  ios-sim launch ~/tools/ios-sim-safari-launcher/IOSSimulatorSafariLauncher.app --family iphone --args $1
}

function ipad-safari-log-memory() {
  export CA_LOG_MEMORY_USAGE=1
  open /Applications/Utilities/Console.app
  ipad-safari $1
}

function iphone-safari-log-memory() {
  export CA_LOG_MEMORY_USAGE=1
  open /Applications/Utilities/Console.app
  iphone-safari $1
}

# kill all processes of a certain type
function nuke {
    kill `ps aux | grep $1 | awk '{print $2}'`
}


# Create a new directory and enter it
function md() {
    mkdir -p "$@" && cd "$@"
}


# find shorthand
function f() {
    find . -name "$1"
}

# cd into whatever is the forefront Finder window.
cdf() {  # short for cdfinder
  cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}


# # lets toss an image onto my server and pbcopy that bitch.
# function scpp() {
#     scp "$1" aurgasm@aurgasm.us:~/paulirish.com/i;
#     echo "http://paulirish.com/i/$1" | pbcopy;
#     echo "Copied to clipboard: http://paulirish.com/i/$1"
# }

# # git log with per-commit cmd-clickable GitHub URLs (iTerm)
# function gf() {
#   local remote="$(git remote -v | awk '/^origin.*\(push\)$/ {print $2}')"
#   [[ "$remote" ]] || return
#   local user_repo="$(echo "$remote" | perl -pe 's/.*://;s/\.git$//')"
#   git log $* --name-status --color | awk "$(cat <<AWK
#     /^.*commit [0-9a-f]{40}/ {sha=substr(\$2,1,7)}
#     /^[MA]\t/ {printf "%s\thttps://github.com/$user_repo/blob/%s/%s\n", \$1, sha, \$2; next}
#     /.*/ {print \$0}
# AWK
#   )" | less -F
# }


# # Copy w/ progress
# cp_p () {
#   rsync -WavP --human-readable --progress $1 $2
# }


# # Syntax-highlight JSON strings or files
# function json() {
#     if [ -p /dev/stdin ]; then
#         # piping, e.g. `echo '{"foo":42}' | json`
#         python -mjson.tool | pygmentize -l javascript
#     else
#         # e.g. `json '{"foo":42}'`
#         python -mjson.tool <<< "$*" | pygmentize -l javascript
#     fi
# }


# # get gzipped size
# function gz() {
#     echo "orig size    (bytes): "
#     cat "$1" | wc -c
#     echo "gzipped size (bytes): "
#     gzip -c "$1" | wc -c
# }


# # All the dig info
# function digga() {
#     dig +nocmd "$1" any +multiline +noall +answer
# }


# # Escape UTF-8 characters into their 3-byte format
# function escape() {
#     printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
#     echo # newline
# }


# # Decode \x{ABCD}-style Unicode escape sequences
# function unidecode() {
#     perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
#     echo # newline
# }


# # Extract archives - use: extract <file>
# # Based on http://dotfiles.org/~pseup/.bashrc
# function extract() {
#     if [ -f "$1" ] ; then
#         local filename=$(basename "$1")
#         local foldername="${filename%%.*}"
#         local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
#         local didfolderexist=false
#         if [ -d "$foldername" ]; then
#             didfolderexist=true
#             read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
#             echo
#             if [[ $REPLY =~ ^[Nn]$ ]]; then
#                 return
#             fi
#         fi
#         mkdir -p "$foldername" && cd "$foldername"
#         case $1 in
#             *.tar.bz2) tar xjf "$fullpath" ;;
#             *.tar.gz) tar xzf "$fullpath" ;;
#             *.tar.xz) tar Jxvf "$fullpath" ;;
#             *.tar.Z) tar xzf "$fullpath" ;;
#             *.tar) tar xf "$fullpath" ;;
#             *.taz) tar xzf "$fullpath" ;;
#             *.tb2) tar xjf "$fullpath" ;;
#             *.tbz) tar xjf "$fullpath" ;;
#             *.tbz2) tar xjf "$fullpath" ;;
#             *.tgz) tar xzf "$fullpath" ;;
#             *.txz) tar Jxvf "$fullpath" ;;
#             *.zip) unzip "$fullpath" ;;
#             *) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
#         esac
#     else
#         echo "'$1' is not a valid file"
#     fi
# }


# # animated gifs from any video
# # from alex sexton   gist.github.com/SlexAxton/4989674
# gifify() {
#   if [[ -n "$1" ]]; then
#     if [[ $2 == '--good' ]]; then
#       ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
#       time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
#       rm out-static*.png
#     else
#       ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
#     fi
#   else
#     echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
#   fi
# }

lambdaUpdate() {
   # Get the lambda function name
   if [ -z "$2" ]; then
       name=${PWD##*/} 
   else
       name=$2
   fi

   # Get the lambda function environment
   if [ -z "$1" ]; then
       env="staging" 
   else
       env=$1
   fi

   # Do the magic
   echo "Zipping $name"
   zip -qr ${name}.zip *
   echo "Uploading to Lambda"
   aws lambda update-function-code --function-name $env-$name --zip-file fileb://${name}.zip
   echo "Removing zip"
   rm ${name}.zip
}

